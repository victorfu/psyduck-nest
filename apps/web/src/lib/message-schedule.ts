import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDocs,
  orderBy,
  query,
  Timestamp,
  updateDoc,
  where,
} from "firebase/firestore";
import { db } from "./firebase";
import { Dayjs } from "dayjs";
import { Auditable } from "@/models";

export interface Recipient {
  name: string;
  line?: string;
  email?: string;
  phone?: string;
}

export interface MessageSchedule extends Auditable {
  id?: string;
  status: "pending" | "scheduled" | "sent" | "failed" | "canceled";
  memberId: string;
  recipient: Recipient;
  workspaceId: string;
  message: {
    title?: string;
    content?: string;
    sendNow?: boolean;
    scheduledDate?: Timestamp;
    scheduledTime?: string;
    channel:
      | "line"
      | "email"
      | "sms"
      | "line_then_email"
      | "line_then_sms"
      | "email_then_sms";
  };
  processed: boolean;
  sentAt?: Timestamp;
  error?: string;
}

export const addMessageSchedule = async (
  messageSchedule: Partial<MessageSchedule>,
) => {
  if ("id" in messageSchedule) {
    // don't add id, it will be generated by firebase
    delete messageSchedule.id;
  }
  if (
    "scheduledDate" in messageSchedule &&
    messageSchedule.scheduledDate instanceof Dayjs
  ) {
    messageSchedule.scheduledDate = messageSchedule.scheduledDate.toDate();
  }
  const docRef = await addDoc(
    collection(db, "message-schedules"),
    messageSchedule,
  );
  return { ...messageSchedule, id: docRef.id } as MessageSchedule;
};

export const getMessageSchedules = async (workspaceId: string) => {
  const querySnapshot = await getDocs(
    query(
      collection(db, "message-schedules"),
      where("workspaceId", "==", workspaceId),
      orderBy("createdAt", "desc"),
    ),
  );
  return querySnapshot.docs.map((doc) => {
    const data = doc.data() as MessageSchedule;
    return { ...data, id: doc.id } as MessageSchedule;
  });
};

export const updateMessageSchedule = async (
  id: string,
  messageSchedule: Partial<MessageSchedule>,
) => {
  await updateDoc(doc(db, "message-schedules", id), messageSchedule);
};

export const deleteMessageSchedule = async (id: string) => {
  await deleteDoc(doc(db, "message-schedules", id));
};
